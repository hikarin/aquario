Integer1;1;1
Integer2;-2;-2
Integer3;'63;63
Integer4;(+ 1 2);3
Integer5;(+ 1 -3);-2
Integer6;(- 3);-3
Integer7;(- 3 5);-2
Integer8;(- 3 5 7);-9
Integer9;(* 2 3 4 5);120
Integer10;(+ (+ 1 2) (+ 3 4) (+ 5 6) (+ 7 8) (+ 9 10));55
Integer11;(+ (* 1 2 3 4 5) (* 6 7 8 9 10));30360
Integer12;(/ 1);1
Integer13;(/ 2);0
Integer14;(/ 100 5 4);5

#comparison
Comparison1;(= 3 2);#f
Comparison2;(= 1 2);#f
Comparison3;(= 2 2);#t
Comparison4;(< 2 3);#t
Comparison5;(< 3 3);#f
Comparison6;(< 4 3);#f
Comparison7;(> 2 3);#f
Comparison8;(> 3 3);#f
Comparison9;(> 4 3);#t
Comparison10;(>= 10 5);#t
Comparison11;(>= 3 10);#f
Comparison12;(>= 5 5);#t
Comparison13;(>= 3 4);#f
Comparison14;(>= 7 8);#f
Comparison15;(>= 3 3);#t

#list
List1;'(a b c);(a b c)
List2;'(a b . c);(a b . c)
List3;(car '(a . b));a
List4;(cdr '(a . b));b
List5;(define lst '(a b c)) (car (cdr lst));lstb

#define
Define1;(define m 100) (cons m m);m(100 . 100)
Define2;(define x 999);x

#string
String1;(define str "hoge") str;str"hoge"
String2;(define str "hoge") (eq? str str);str#t
String3;(define str "hoge") (eq? str "fuga");str#f

#symbol
Symbol1;'test;test
Symbol2;(quote a);a
Symbol3;(quote (quote b));'b
Symbol4;(quote 10);10
Symbol5;(= (quote 1) 1);#t
Symbol6;'(+ 1 2);(+ 1 2)
Symbol7;(define x 'n) x;xn
Symbol8;(define x 100) (define y x) y;xy100

#print
Print1;(print);\n#undef
Print2;(print 1);1\n#undef
Print3;(print 1 2 3);123\n#undef
Print4;(print '(1 2 3 4 5));(1 2 3 4 5)\n#undef
Print5;(define prints (lambda (x y) (print x) (cons x y))) (prints 1 2);prints1\n(1 . 2)

#comment TODO

#lambda
Lambda1;(define null? (lambda (x) (eq? x nil))) (null? '());null?#t
Lambda2;(define len (lambda (x) (if (eq? x nil) 0 (+ 1 (len (cdr x)))))) (len '(1 2 3 4));len4
Lambda3;(define fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))) (fib 15);fib987
Lambda4;(define list (lambda (x . y) (cons x y))) (list 1 2 3);list(1 2 3)
Lambda5;(define list (lambda (x . y) (cons x y))) (define lst '(3 4 5)) (list 1 2 lst);listlst(1 2 (3 4 5))
Lambda6;(define func (lambda (a . b) (cons b a))) (func 1 2 3 4 5);func((2 3 4 5) . 1)
Lambda7;(define fib (lambda (n) (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2)))))) (fib 13);fib233
Lambda8;(define tak (lambda (x y z) (if (<= x y) z (tak (tak (- x 1) y z) (tak (- y 1) z x) (tak (- z 1) x y))))) (tak 4 2 0);tak1
